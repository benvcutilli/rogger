Resources used to make this project (citations can be found in the code base as well,
using the [#] notation to index each source found on this page; for any reference to
the original version of Rogger, you can find information on how to find that under the
"ACKNOWLEDGEMENTS" section), BUT NOT ALL CITATIONS ARE HERE! SOME ARE ALSO JUST SOMEWHERE
ELSE IN THIS REPOSITORY! Some may also be on just the server of the website itself,
and so you can't see the files, though I tried to be diligent about putting those citations
here:

[1]   http://stackoverflow.com/questions/4571686/django-include-template-from-another-app
[2]   http://www.w3schools.com/colors/colors_picker.asp for picking colors
[3]   Google Fonts, from which you will find various fonts that were used throughout
      this site, loaded from the server fonts.googleapis.com
[4]   Padding seems to add width to at least divs, so the solution to this problem
      was found here: http://stackoverflow.com/a/23692739/4722104
[5]   For centering; this technique seems like common practice, and source is unknown
[6]   http://stackoverflow.com/a/3942399/4722104 for setting CSS to all elements of
      page
[7]   How to hide scroll bars: http://stackoverflow.com/a/23771140/4722104
[8]   Bullet points as information separators idea taken from Google Play Music
      (where they are used to separate album stats like time)
[9]   <br>s used in this div for line breaks is an idea from http://stackoverflow.com/q/12694110/4722104
[10]  Used the table display trick from here for vertical alignment of text:
      https://css-tricks.com/vertically-center-multi-lined-text/
[11]  Profile picture overlapping banner in the center of the banner idea from some unknown
      source
[12]  Whitespace can cause gaps between divs. Reduced font size to 0px to solve this problem.
      Source is unknown.
[13]  Removing drop down arrow for selects: http://stackoverflow.com/questions/16603979/select-removing-dropdown-arrow
[14]  Using OneToOneField to mimic additional information added to built-in User model from Django documentation and unknown source (was used in previous project)
[15]  Passing csrfmiddlewaretoken into POST dictionary to fix the header thing not working is from and unknown source, but used
      in the previous iteraiton of Rogger
[16]  Used model reference from string found at this location http://stackoverflow.com/a/39712086 to resolve circular dependencies
      on imports
[17]  Differentiating between different button presses in form submission from http://stackoverflow.com/questions/1395807/proper-way-to-handle-multiple-forms-on-one-page-in-django
[18]  Help with putting string in raw format for javascript safety: http://stackoverflow.com/a/15392758 (used this answer and the comments on the answer for help)
[19]  Probably a commonly-used way to wrap a counter to mimic a ring buffer, but this code was at least sanity checked by, but possibly derived from, my knowledge that "Operating System Design: The Xinu Approach (Second Edition)" by Douglas Comer uses this technique
[20]  related_name naming scheme from https://docs.djangoproject.com/en/1.10/topics/db/queries/#following-relationships-backward (the FOO_set explanation part); also, I think I did this using-related_name-thing-to-resolve-migration-conflicts thing in the original Rogger project, suggested by a citation that I don't have on me right now, but this modification was recommended anyway by the django library when i tried to run the site, and I just followed those instructions, so citing the other resource may not be necessary
[21]  Using scrollIntoView() to scroll parent element to the element calling scrollIntoView() from unknown source
[22]  This conditional, for calculating if scrolling has reached the bottom, from multiple sources that are unknown
[23]  noMoreUpdates variable for keeping track of if we received notice that no more updates were available from the previous version of Rogger (codebase at bitbucket.org/roggerlogger), can't remember if I got this technique from an outside source
[24]  <br/> usage to break lines in ReportLab from unknown source
[25]  The strategy of allowing both approved and unapproved followers see user data if the privacy setting is set to public
      but then showing all follows that have occurred but still need to be approved when the privacy setting is public or more
      secure is from the previous version of Rogger; I don't think there are any resources that I used to get that strategy,
      but I can't remember everything that I used, so to be safe I will say that there is a possibility an outside resource helped.
      The "approved" attribute in the Follow model keeps track of whether a follow is approved, and, again, is only looked at
      if the user-who-is-being-followed's profile is not on the public setting.
[26]  This technique of a hidden form to be triggered from a remote button from unknown source(s).
[27]  Not sure if I used this kind of variable in the last version of Rogger and if there is a citation for it.
[28]  Using a presigned URL to control access to files in buckets is an idea from an unknown source.
[29]  Using middleware to remember when the user was last active from unknown source.
[30]  I was told by some unknown source that using the .dataset property in javascript isn't backwards compatible,
      so there was an alternate method discussed, which I believe was .getAttribute(), which
      https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes suggested.
[31]  Having display names is inspired by Twitter (and probably inspired by others as well)
[32]  http://stackoverflow.com/questions/4571686/django-include-template-from-another-app
[33]  MIT License from https://opensource.org/licenses/MIT via https://en.wikipedia.org/wiki/MIT_License
[34]  These types are from and/or inspired by the original Rogger (see url for the original Rogger below in the "ACKNOWLEDGEMENTS" section),
      and they were inspired by merv.stanford.edu, so they were not my own creation
[35]  These types are definitely from the original Rogger (see url for the original Rogger below in the "ACKNOWLEDGEMENTS" section),
      and they were from merv.stanford.edu, so they were not my own creation.
[36]  To seek to the 0 position in a BytesIO before sending the file with boto3 from https://stackoverflow.com/questions/36274868/saving-an-image-to-bytes-and-uploading-to-boto3-returning-content-md5-mismatch
[37]  Properly setting up the form for picture upload from https://www.cs.tut.fi/~jkorpela/forms/file.html
[38]  Using a table, tr, and td (and whatever tags show up that the browser puts in itself automatically) is
      an idea derivative to the answer(s) found here:
      https://stackoverflow.com/questions/8468066/child-inside-parent-with-min-height-100-not-inheriting-height
[39]  Using height instead of min-height to specify a minimum height and learning that I have to use it on
      a <td> element is from https://stackoverflow.com/questions/19432092/can-i-use-a-min-height-for-table-tr-or-td
[40]  Suggestion to use CodeMirror as a syntax highlighter is from
      https://stackoverflow.com/questions/1619167/textarea-that-can-do-syntax-highlighting-on-the-fly
[41]  Confirming that escapejs is safe for use in Javascript strings that are within HTML files is from https://stackoverflow.com/questions/23331988/djangos-escapejs-filter-and-xss
[42]  I am not sure if this filter method to remove zeros from end of number is from someone else's idea. I feel like there is a chance it is, but I can't remember
[43]  merv.stanford.edu
[44]  This function name inspired by the name of Django's send_mail() function
[45]  Using the time.sleep() (or any time.sleep()-like function) function to rate-limit the emails being sent out is an idea from
      an unknown source.
[46]  The idea of creating this function is from the old Rogger, which also had a similar function
[47]  Chrome was complaining about how the CSRF cookie was not valid, so adding CSRF_COOKIE_SECURE and setting it to "True" to the
      settings file (which you can't see in this repository) is an idea from https://groups.google.com/d/topic/wagtail/opM27Qnj_NU/discussion and (an)other unknown resource(s)
[48]  Explanation of what I need to say to users to abide by the the EU Cookie law(s) is from https://www.cookielaw.org/the-cookie-law/ and http://ec.europa.eu/ipg/basics/legal/cookies/index_en.htm

GENERAL CITATIONS:
This site has a lot of influence from merv.standford.edu. Some major ideas from there (but possibly not all of them if my memory is failing me):
  Creating shoes and tracking mileage on them in logs/adding them to log entries
  Using a calendar layout (probably most influential is the ability to click on a date on the calendar to make a new entry for that date)
  Workout creation layout
  Custom workout types
  Allowing users' profiles to go completely private with no or close to no hint of the account existing
Also, as I think I have stated elsewhere in this file, this site uses a lot of common features found around web

DEBUG:
Thanks to everyone that submitted bug reports.

SUGGESTIONS:
Thanks to everyone who suggested things to make the site better.


This site is built on the Django web development framework.

How to set up NGINX (the web server) to serve this Django app
is from https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-uwsgi-and-nginx-on-ubuntu-14-04,
http://uwsgi-docs.readthedocs.io/en/latest/WSGIquickstart.html,
https://www.digitalocean.com/community/tutorials/understanding-the-nginx-configuration-file-structure-and-configuration-contexts (for telling me where to put the Rogger server configuration (somewhere in /etc/nginx/nginx.conf)),
and probably other unknown resources as well. (SEE OTHER CITATIONS BELOW, THEY TAKE PRECEDENCE)

Thanks to https://www.whatsmydns.net, http://www.inmotionhosting.com/support/tools/visual-domain-routing, and other unknown sources, for helping debug the server.

Using json.loads() to convert strings with surrogate pairs into proper unicode for data import from a json file is from
https://stackoverflow.com/questions/38147259/how-to-work-with-surrogate-pairs-in-python and possibly others as well.

Thanks to https://community.letsencrypt.org/t/are-they-limitations-on-who-can-use-lets-encrypt/687 for clearing up
whether or not I can use Certbot and Let's Encrypt on my site and still stay compliant by licensing the site code under the MIT License (below).

Thanks to https://stackoverflow.com/questions/44892085/letsencrypt-certbot-timeout-error for helping me debug using Certbot and Let's Encrypt.

Thanks to https://lifehacker.com/5683682/five-best-domain-name-registrars for suggesting Name.com to use as a domain name registrar.

Using a virtualenv'd folder to house a Django project is an idea from an unknown resource (high probability that is is from the Django's team's own django tutorials at djangoproject.com).

Checking sqlite3 database for corruption using the PRAGMA integrity_check command is from https://serverfault.com/questions/8048/how-can-i-verify-that-a-sqlite-db3-file-is-valid-consistent

Deleting all Django sessions technique I used is from http://blog.sashalaundy.com/blog/2014/08/26/howto-force-all-django-users-to-log-out-with-the-django-orm/

How to install sqlite3 for Ubuntu (as the sqlite3 Linux download didn't work) is from https://askubuntu.com/questions/150347/sqlite-binary-file-does-not-work-on-my-ubuntu

Explanation of what I need to worry about regarding the EU Cookie law(s) is from https://www.cookielaw.org/the-cookie-law/ and http://ec.europa.eu/ipg/basics/legal/cookies/index_en.htm

systemd-uwsgi-DAEMON-DEFINTION-FILE-SPECIFIC CITATIONS
-------------------------------------------------------
It is probable that using systemd to start up (and coordinate) the uwsgi server for Rogger is a suggestion from
https://serverfault.com/questions/785502/create-daemon-on-ubuntu-16-04. Also, the structure of this file is based
off an example found at https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/sect-Managing_Services_with_systemd-Unit_Files.html
and possibly elsewhere.

ExecStart command is a derivative of those found at http://uwsgi-docs.readthedocs.io/en/latest/WSGIquickstart.html, and possibly from
https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-uwsgi-and-nginx-on-ubuntu-14-04,
https://docs.djangoproject.com/en/1.11/howto/deployment/wsgi/uwsgi/, and maybe other resources

Setting Type to forking is a suggestion from (an) unknown resource(s)

WantedBy usage (from unknown resource(s) and https://www.digitalocean.com/community/tutorials/understanding-systemd-units-and-unit-files),
seems to be the best way to get this service running at boot, and possibly recognized by any systemd command.

Using the --home option for uwsgi is a suggestion from an unknown resource and discussed in https://docs.djangoproject.com/en/1.11/howto/deployment/wsgi/uwsgi/
--------------------------------------------------------
END systemd-uwsgi-DAEMON-DEFINTION-FILE-SPECIFIC CITATIONS



/etc/nginx/nginx.conf rogger SERVER DEFINITION CITATION SECTION
--------------------------------------------------------
THIS SERVER DEFINTION IS A DERIVATIVE OF THE SERVER DEFINTIONS FOUND AT
https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-uwsgi-and-nginx-on-ubuntu-14-04,
http://uwsgi-docs.readthedocs.io/en/latest/WSGIquickstart.html,
AND PROBABLY OTHERS.

Putting this server definition here (/etc/nginx/nginx.conf) is from
https://www.digitalocean.com/community/tutorials/understanding-the-nginx-configuration-file-structure-and-configuration-contexts

All sections in the server configuration section talking about how Certbot is its manager were created and/or modified by Certbot, not me
(basically, for those without access to the file, this is the code that redirects non-HTTPS connections to HTTPS connections, and
and certificate setup)

Method of redirecting non-HTTPS requests in the nginx rogger server config (The "if ($scheme != "https")" if clause)
was made by Certbot, and https://serverfault.com/questions/250476/how-to-force-or-redirect-to-ssl-in-nginx confirmed for me
that this was a way to do that and also pointed out that I can still listen on port 80 in the same server definition to allow
those non-HTTPS connections to come in and get redirected to the HTTPS site.

Thanks to https://serverfault.com/questions/814767/413-request-entity-too-large-in-nginx-with-client-max-body-size-set
for telling me what the variable is in the nginx configuration that controls how big a request is allowed through the server.
Limiting the request size using the web server instead of Django or something else is a suggestion from an unknown source.
--------------------------------------------------------
END /etc/nginx/nginx.conf rogger SERVER DEFINITION CITATION SECTION



Installation instructions I used for the production server (plus some other outside knowledge that I don't remember where it is from) were found here:
virtualenv:    With pip (not sure about source for this method of installation)
Django:        With pip (not sure where I got this from; may be recommended by the Django team themselves)
nginx:         https://www.nginx.com/resources/wiki/start/topics/tutorials/install/ (they talk about modifying the /etc/apt/sources.list file, which I did)
pip:           https://pip.pypa.io/en/stable/installing/ (with the get-pip method + python3 instead of python)
ReportLab:     https://bitbucket.org/rptlab/reportlab (the README, with pip)
Boto 3:        https://github.com/boto/boto3 (with pip)
Pillow:        http://pillow.readthedocs.io/en/3.0.x/installation.html (with pip, although ReportLab had already installed it as a dependency)
uWSGI:         https://uwsgi-docs.readthedocs.io/en/latest/Install.html (with pip + "sudo apt-get install gcc" + "sudo apt-get install python3-dev")
Certbot:       https://certbot.eff.org/#ubuntuxenial-nginx



Thanks to https://www.sqlite.org/onefile.html for mentioning that a SQLite 3 file is cross-platform (and I think cross architecture), which saved me
a ton of headache.





This site uses Django, JQuery, ReportLab, Pillow, Boto3, Let's Encrypt (a GREAT GREAT GREAT initiative) + Certbot (also FANTASTIC), nginx, Ubuntu 16.04 (the AWS variant), virtualenv, pip, CodeMirror, Amazon Web Services, and probably other things I'm forgetting to mention as well.

Thanks to Atom (developed by Github, I think) for being a (relatively) great text editor. It was used for the majority of the code that I wrote for this site.

ACKNOWLEDGEMENTS:
The design of this site is inspired by all my experience using the web. The
navigation bar at the top, the search bar, the Material-design(by Google)-inspired
layout and encapsulation of objects, the reverse-chronological feeds, etc. are not
my own creation; in fact, you will find very few things that *are* my complete
original ideas when it comes to design and aesthetics.

Also, a ton of this site is based on experience with merv.standford.edu, which
is a running log site whose users' exported data I support for importing.

The code for the old version of this site can be found at bitbucket.org/roggerlogger/rog under the "refactor" and "master" branches (refactor has more citations if you are looking for them)


LICENSE (MIT, from citation [33]):

Copyright 2017 Benjamin Cutilli

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
