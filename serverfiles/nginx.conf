user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

# (A) For blocking people not in the US due to GDPR
#   https://eur-lex.europa.eu/legal-content/EN/TXT/PDF/?uri=OJ:L:2016:119:FULL&from=EN
#   Official Journal of the European Union
#   author - European Union
#   published - 2016.5.4
#   via - https://eur-lex.europa.eu/legal-content/EN/TXT/PDF/?uri=CELEX:02016R0679-20160504&from=EN
#         possibly https://eur-lex.europa.eu/legal-content/EN/TXT/PDF/?uri=CELEX:02016R0679-20160504&qid=1567786393726&from=EN
# Blocking is an idea from an unknown reference, possibly when the
# LA Times (https://www.latimes.com/) did it some time ago according to
# some unknown source published and retrieved around May of 2018.






# See (A) for the next line of configuration.
# Using load_module in this next line is from
#   https://www.nginx.com/blog/compiling-dynamic-modules-nginx-plus/amp/
#   How to Compile Dynamic Modules for NGINX Plus
#   published - 2016 (approximately)
#   retrieved - 2019.11.4
#   via - google.com search with search phrase "compiling new modules for nginx"
# and from the section "Installing" in
#   https://github.com/leev/ngx_http_geoip2_module
#   GitHub - leev/ngx_http_geoip2_module: Nginx GeoIP2 module
#   author - leev
#   retrieved - sometime during 2019.10.31 - 2019.11.4
#   via - https://serverfault.com/questions/865990/nginx-and-geolite2-not-working
# this module is also from the reference above. It was recommended by
#   https://serverfault.com/questions/865990/nginx-and-geolite2-not-working
#   geoip - Nginx and GeoLite2 not working - Server Fault
#   author - Joe and user3448600
#   retrieved - sometime during 2019.10.31 - 2019.11.4
#   published - 2017.7.31, 2018.9.3
#   via - google.com search for "ngx_http_geoip_module geolite"
load_module modules/ngx_http_geoip2_module.so;

events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;


    # See (A) for the next line of configuration.
    # File GeoLite2-Country.mmdb provided by geoipupdate, which is from
    #   https://launchpad.net/~maxmind/+archive/ubuntu/ppa
    #   user - maxmind
    #   page via launchpad.net search for "maxmind"
    # Using the ngx_http_geoip2_module discussed above to set the
    # $country variable
    geoip2 /home/ubuntu/maxminddatabasefiles/GeoLite2-Country.mmdb {
      auto_reload 1m;
      $country country iso_code;
    }

    # THIS NEXT SERVER DEFINTION IS A DERIVATIVE OF THE SERVER DEFINTIONS FOUND AT
    #   https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-uwsgi-and-nginx-on-ubuntu-14-04
    #   How to Serve Django Applications with uWSGI and Nginx on Ubuntu 14.04 | DigitalOcean
    #   author - Justin Ellingwood
    #   published - 2015.3.11
    #   via - probably a google.com search
    # AND
    #   http://uwsgi-docs.readthedocs.io/en/latest/WSGIquickstart.html
    #   Quickstart for Python/WSGI applications -- uWSGI 2.0 documentation
    #   author - Pavlo Kapyshin, Aarni Koskela, Unbit, Jeff Widman, Balaji Iyer, Inada Naoki,
    #            Adriano Di Luzio, lord63, kangle yu, Viktor Szakats, Jon Dufresne, Tobias Schonberg
    #   published - 2016.12.15
    #   "revision" - b1f83a5d
    #   via - probably a google.com search
    #   other info - authors and publication date are from https://github.com/unbit/uwsgi-docs/blob/master/WSGIquickstart.rst
    # AND PROBABLY OTHERS. Putting this server defintion here is from
    #   https://www.digitalocean.com/community/tutorials/understanding-the-nginx-configuration-file-structure-and-configuration-contexts
    #   Understanding the Nginx Configuration File Structure and Configuration Contexts | DigitalOcean
    #   author - Justin Ellingwood
    #   published - 2014.11.19
    #   via - probably a google.com search
    # All sections below talking about how Certbot is its manager were created and/or modified by Certbot
    #   https://certbot.eff.org/
    #   author - Electronic Frontier Foundation
    # not me. Method of redirecting non-HTTPS requests in the nginx rogger server config (The "if ($scheme != "https")" if clause)
    # was made by Certbot, and
    #   https://serverfault.com/questions/250476/how-to-force-or-redirect-to-ssl-in-nginx
    #   How to force or redirect to SSL in nginx? - Server Fault
    #   author - various
    #   retrieved - late 2017, I think
    #   via - probably some google.com search
    # confirmed for me that this was a way to do that and also pointed out that I can still listen on port 80
    # in the same server definition to allow those non-HTTPS connections to come in and get redirected to the HTTPS site.
    server {
      # FOR CITATION ABOUT THIS NEXT listen, SEE THE CITATION ABOVE THIS SERVER DEFINITION
      listen 80;
      server_name rogger.co www.rogger.co *.rogger.co;


      # See (A) for the reason why this conditional exists. This conditional
      # roughly follows the country-blocking code from
      #   https://uwsgi-docs.readthedocs.io/en/latest/GeoIP.html
      #   The GeoIP Plugin -- uWSGI 2.0 Documentation
      #   Retrieved 2019.10.31
      #   "Revision" (bottom of page) b1f83a5d
      #   Via google.com search
      # in the "An example" section
      # Testing to see if empty for debugging due to unknown reference retrieved
      # probably around 2019.10.31 saying that their geoip_country_code variable was empty
      if ($country != "US") {
        return 403;
      }

      location /static {
        root /home/ubuntu/roggerenv/rogger;
      }

      # Thanks to
      #   https://serverfault.com/questions/814767/413-request-entity-too-large-in-nginx-with-client-max-body-size-set
      #   "413 Request Entity Too Large" in Nginx with "client_max_body_size" set - Server Fault
      #   author - various
      #   retrieved - late 2017, I think
      #   via - probably some google.com search
      # for telling me what the variable is in the nginx configuration that controls how big a
      # request is allowed through the server. Limiting the request size using the web server
      # instead of Django or something else is a suggestion from an unknown source.
      client_max_body_size 10M;

      # This sends the request to my uWSGI instance. uWSGI is from
      #   https://uwsgi-docs.readthedocs.io/en/latest/
      #   The uWSGI project -- uWSGI 2.0 documentation
      location / {
        include uwsgi_params;
        uwsgi_pass 127.0.0.1:8251;
      }

    # FOR CITATION ABOUT THESE NEXT FOUR LINES, SEE THE CITATION ABOVE THIS SERVER DEFINITION
    listen 443 ssl; # managed by Certbot
ssl_certificate /etc/letsencrypt/live/rogger.co/fullchain.pem; # managed by Certbot
ssl_certificate_key /etc/letsencrypt/live/rogger.co/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot


    # FOR CITATION ABOUT THIS NEXT if SECTION, SEE THE CITATION ABOVE THIS SERVER DEFINITION
    if ($scheme != "https") {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    # FOR CITATION ABOUT THIS NEXT if SECTION, SEE THE CITATION ABOVE THIS SERVER DEFINITION
    # Redirect non-https traffic to https
    # if ($scheme != "https") {
    #     return 301 https://$host$request_uri;
    # } # managed by Certbot




}
    # This server definition is used to reject requests that aren't for the domains processed by the server definition below.
    # The "return" usage is from "Server Names", http://nginx.org/en/docs/http/server_names.html (retrieved 2017.12.18 2018.3.21,
    # section "Miscellaneous Names", probably via a google.com search) in the code under:
    #    'In catch-all server examples the strange name "_" can be seen'
    # (that phrase is also why I used "none" for a server name). Putting this as the first server to make it "default"
    # (although it was suggested by {{b}} to just use the default_server command, which also said that all request will
    # go to the first server if no server uses "default_server", so this is not exactly the same thing as "the first
    # server is the defautl server)
    # so that other domains are processed here and not in the other server is probably from the same page and/or
    # {{a}} https://serverfault.com/a/525011
    #       Nginx "Default" Server? - Server Fault
    #       authors - Fleshgrinder, Rob Wilkerson, possibly others
    #       via - probably some google.com search
    # {{b}} http://tech.genericwhite.com/nginx-server-name-is-not-working-ignoring-config-and-getting-the-wrong-server-including-ssl
    #       NGINX server_name is not working, ignoring config and getting the wrong server including SSL - I Love Javascript! (December 2017/January 2018)
    #       retrieved - 2018.3.21 and sometime(s) previous in 2018 and/or 2017
    #       published - 5:06PM on 2017.1.17
    #       author - TQ White II according to https://github.com/tqwhite.
    #       via - probably some google.com search
    # {{c}} https://stackoverflow.com/a/9826635/4722104,
    #       Why is nginx responding to any domain name - Stack Overflow
    #       published - 2014.9.27
    #       retrieved - 2018.3.21
    #       the answer by "Dayo"
    #       via - probably some google.com search
    # Making sure that these requests stop here and not at Django so that I don't
    # get spammed with error emails is an idea from
    #   https://stackoverflow.com/questions/18220519/how-to-disable-djangos-invalid-http-host-error
    #   logging - How to disable Django's invalid HTTP_HOST error? - Stack Overflow
    #   authors - various
    #   via - probably some google.com search
    # Even though this version of the site uses Nginx (and I think that site talks about Apache),
    # there might be some configuration used there that was directly, or more likely indirectly, relevant to what I wrote
    # for this server definition. Using two different listens for each port is an idea from Certbot
    #   certbot.eff.org
    #   Electronic Frontier Foundation
    # which did this for the server defition for Rogger.
    #
    # "default_server" usage is from:
    # {{d}} http://nginx.org/en/docs/http/server_names.html
    #       Server Names
    #       retrieved - 2018.3.21
    #       section - Miscellaneous Names
    #       author - Igor Sysoev
    #       editor - Brian Mercer
    #       via - probably some google.com search
    # and
    # {{e}} http://tech.genericwhite.com/nginx-server-name-is-not-working-ignoring-config-and-getting-the-wrong-server-including-ssl
    #       NGINX server_name is not working, ignoring config and getting the wrong server including SSL - I Love Javascript! (December 2017/January 2018)
    #       retrieved - 2018.3.21 and sometime(s) previous in 2018 and/or 2017
    #       published - 5:06PM on 2017.1.17
    #       author - TQ White II according to https://github.com/tqwhite.
    #       via - probably some google.com search
    # {{f}} "default" is from somewhere else that I forget, but I don't use it here. Retrieved probably late 2017 and/or early 2018 and
    #       searching with google.com likely helped me find it
    #
    # These resources were useful in some way, but I forget (probably related to the default_server, or to the suggestion of
    # creating virtual server to deal with unknown domains, like showing the syntax on how to do it):
    # {{g}} https://www.nginx.com/resources/wiki/start/topics/examples/server_blocks/
    #       Server Block Examples | NGINX (December 2017/January 2018)
    #       author - NGINX Software, Inc
    #       retrieved - 2017 and/or 2018
    #       via - probably some google.com search
    # {{h}} https://serverfault.com/questions/524813/nginx-default-server
    #       'Nginx "Default" Server? Server Fault
    #       retrieved - 2017 and/or 2018; 2013
    #       published - 2013, 2015-2017
    #       via - probably some google.com search
    #server {
    #  server_name none; # (from {{g}} 'A Default "Catch All" Server Block'), ({{d}} "Miscellaneous Names") where they both
    #                    # use "_" for "server_name"
    #  listen 80 default_server; # default/default_server citaitons in comments above
    #  #listen 443 default_server; # default/default_server citaitons in comments above
    #  return 403;
    #}
}
