# This is a configuration file for NGINX (reference C). Everything in here is written by me (Ben Cutilli)
# except where noted. How these references were found can either be read about where they are cited
# or within the reference entries themselves.

# (A) For blocking people not in the US due to GDPR
#   https://eur-lex.europa.eu/legal-content/EN/TXT/PDF/?uri=OJ:L:2016:119:FULL&from=EN
#   Official Journal of the European Union
#   author - European Union
#   published - 2016.5.4
#   via - https://eur-lex.europa.eu/legal-content/EN/TXT/PDF/?uri=CELEX:02016R0679-20160504&from=EN
#         possibly https://eur-lex.europa.eu/legal-content/EN/TXT/PDF/?uri=CELEX:02016R0679-20160504&qid=1567786393726&from=EN
# Blocking is an idea from an unknown reference, possibly when the
# LA Times (https://www.latimes.com/) did it some time ago according to
# some unknown source published and retrieved around May of 2018.

# (B) https://www.ietf.org/rfc/rfc2616.txt
#     Hypertext Transfer Protocol -- HTTP/1.1
#     authors - R. Fielding, J. Gettys, J. Mogul, H. Frystyk,
#                L. Manister, P. Leach, T. Berners-Lee (author order same as reference)
#     rfc # - 2616
#     published - 1999.6
#     via - https://www.w3.org/Protocols/rfc2616/rfc2616.html, which was via an unknown
#           reference

# (C) nginx.org
#     NGINX

# (D) http://nginx.org/en/docs/http/ngx_http_core_module.html
#     Module ngx_http_core_module
#     retrieved - 2019.11.10, 2019.11.23, 2019.12.3, 2019.12.4

# (E) https://tools.ietf.org/html/rfc7617
#     RFC 7617 - The 'Basic' HTTP Authentication Scheme
#     author - J. Reschke
#     published - 2015.9
#     retrieved - 2019.11.20
#     via - reference BI, "Basic authentication scheme"

# (F) https://www.nginx.com/resources/wiki/start/topics/examples/forwarded/
#     Using the Forwarded header | NGINX
#     retrieved - 2019.11.20, 2019.12.12
#     via - google.com search for "http_x_forwarded_for nginx" ("http_x_forwarded_for"
#           variable from this file distributed with reference C, "nginx" from reference C)

# (G) https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For
#     X-Forwarded-For - HTTP | MDN
#     published - 2019.3.23
#     retrieved - 2019.11.20
#     via - google.com search for "x-forwarded-for" (search term from reference F, intro section)

# (H) https://github.com/torvalds/linux
#     Linux

# (I) https://tools.ietf.org/html/rfc1034
#     Domain Names - Concepts and Facilities
#     author - P. Mockapetris
#     published - 1987.11
#     retrieved - 2019.11.22
#     via - "History" section of reference AH

# (J) https://tools.ietf.org/html/rfc1035
#     Domain Names - Implementation and Specification
#     author - P. Mockapetris
#     published - 1987.11
#     retrieved - 2019.11.22
#     via - "History" section of reference AH

# (K) nginx.org/en/docs/http/ngx_http_rewrite_module.html
#     Module ngx_http_rewrite_module
#     retrieved - 2019.11.23, 2019.12.5

# (L) https://tools.ietf.org/html/rfc2818
#     HTTP over TLS
#     author - E. Rescorla
#     retrieved - 2019.11.23, prior as well
#     published - 2000.5
#     via - reference BK, "History" section

# (M) http://nginx.org/en/docs/ngx_core_module.html
#     Core functionality
#     retrieved - 2019.11.24, 2019.12.3, 2019.12.5
#     via - search using google.com, and there may be some references/sources that gave me the search terms used

# (N) nginx.org/en/docs/http/ngx_http_log_module.html
#     Module ngx_http_log_module
#     retrieved - 2019.11.25, 2019.11.30, 2019.12.4
#     via - http://nginx.org/en/docs/dirindex.html, "log_format" link

# (O) http://nginx.org/en/docs/http/ngx_http_gzip_module.html
#     Module ngx_http_gzip_module
#     retrieved - 2019.11.26
#     via - http://nginx.org/en/docs/dirindex.html, "gzip" link

# (P) https://tools.ietf.org/html/rfc1952
#     GZIP file format specification version 4.3
#     author - P. Deutsch
#     retrieved - 2019.11.26
#     published - 1996.5
#     rfc number - 1952
#     via - reference BJ, "Links" section

# (Q) https://www.gnu.org/software/gzip/
#     gzip
#     author - Jean-loup Gailly, Mark Adler, Paul Eggert, Jim Meyering, others
#     via - reference BJ, "Links" section

# (R) https://zlib.net/
#     zlib
#     via - search with google.com, and there may be some references/sources that gave me the search terms used;
#           also possibly via "Links" section of reference BJ

# (S) http://nginx.org/download/nginx-1.16.1.tar.gz
#     nginx-1.16.1.tar.gz
#     retrieved - latter part of 2019

# (T) https://www.iso.org/iso-3166-country-codes.html
#     ISO - ISO 3166 Country Codes
#     author - International Organization for Standards
#     retrieved - 2019.11.26
#     via - reference V, "External links"

# (U) google.com
#     author - Google, Inc.
#     retrieved - 2019.11.26
#     search term - country iso codes
#     note - "search term" value is based on the feature from AP where we can get
#            the ISO country code of a user

# (V) https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes
#     List of ISO 3166 country codes - Wikipedia
#     retrieved - 2019.11.26, 2019.12.9
#     published - 2019.11.26
#     via - reference U

# (W) nginx.org/en/docs/http/ngx_http_uwsgi_module.html
#     Module ngx_http_uwsgi_module
#     retrieved - 2019.11.29

# (X) http://nginx.org/en/docs/http/ngx_http_ssl_module.html
#     Module ngx_http_ssl_module
#     retrieved - 2019.11.29

# (Y) https://tools.ietf.org/html/rfc7468
#     Textual Encodings of PKIX, PKCS, and CMS Structures
#     authors - S. Josefsson and S. Leonard (author order same as reference)
#     published - 2015.4
#     rfc number - 7468
#     retrieved - 2019.11.29 and prior
#     via - reference Z, intro

# (Z) https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail
#     Privacy-Enhanced Mail - Wikipedia
#     published - 2019.9.29 and prior
#     retrieved - 2019.11.29 and prior
#     via - google.com search for "PEM rfc" ("PEM" is from the
#           key format used in SSL for this file (see the configuration
#           lines below provided by Certbot (reference AX) using .pem
#           files), and "rfc" refers to the Request For Comments documents
#           found at reference BQ).

# (AA) https://tools.ietf.org/html/rfc1421
#      Privacy Enhancement for Internet Electronic Mail:
#      Part I: Message Encryption and Authentication Procedures
#      author - J. Linn
#      published - 1993.2
#      retrieved - 2019.11.29
#      rfc number - 1421
#      via - google.com search for "PEM rfc" ("PEM from Certbot (reference AX)-created .pem files used in
#            this configuration; "rfc" from Request for Comments discussed by reference BQ)

# (AB) https://tools.ietf.org/html/rfc791
#      Internet Protocol: DARPA Internet Program: Protocol Specification
#      author - Information Sciences Institute
#      published - 1981.9
#      retrieved - 2019.11.30, 2019.12.10
#      via - reference AC, intro

# (AC) https://en.wikipedia.org/wiki/IPv4
#      IPv4 - Wikipedia
#      published - 2019.11.30
#      retrieved - 2019.11.30
#      via - google.com search for "ip address" ("ip address" refers to IP addresses
#            defined by references AB and AD, and point 4 discusses the steps that
#            occurred to find these)

# (AD) https://tools.ietf.org/html/rfc8200
#      Internet Protocol, Version 6 (IPv6) Specfication
#      author - S. Deering, R. Hinden (author order same as reference)
#      published - 2017.7
#      retrieved - 2019.11.30
#      via - reference AE, "Standardization through RFCs" section

# (AE) https://en.wikipedia.org/wiki/IPv6
#      IPv6 - Wikipedia
#      retrieved - 2019.11.30
#      published - 2019.11.26
#      via - https://en.wikipedia.org/wiki/IP_address

# (AF) https://tools.ietf.org/html/rfc1738
#      Uniform Resource Locators (URL)
#      author - T. Berners-Lee, L. Masinter, M. McCahill (author order same as reference)
#      published - 1994.12
#      retrieved - 2019.11.29
#      via - reference AG, "History" section

# (AG) https://en.wikipedia.org/wiki/URL
#      URL - Wikipedia
#      published - 2019.10.16
#      retrieved - 2019.11.30
#      via - google.com search for "URL" ("URL" is from Uniform resource locators
#            defined by reference AF which was via "History" from reference AG)

# (AH) https://en.wikipedia.org/wiki/Domain_Name_System
#      Domain Name System - Wikipedia
#      retrieved - 2019.11.22
#      published - 2019.9.30
#      via - google.com search for "DNS rfc" ("DNS" is the acronym for Domain Name System,
#            (references I and J via "History" of reference AH) while "rfc" refers to
#            Request for Comments, reference BQ)

# (AI) https://serverfault.com/a/525011
#      Nginx "Default" Server? - Server Fault
#      authors - Fleshgrinder, Rob Wilkerson, possibly others
#      via - probably some google.com search (possibly using search terms from some reference(s))
#      retrieved - 2017 and/or 2018, 2019.12.1
#      published - 2013, 2015-2017

# (AJ) http://tech.genericwhite.com/nginx-server-name-is-not-working-ignoring-config-and-getting-the-wrong-server-including-ssl
#      NGINX server_name is not working, ignoring config and getting the wrong server including SSL - I Love Javascript! (December 2017/January 2018)
#      retrieved - 2018.3.21 2019.11.30, and sometime(s) previous in 2018 and/or 2017
#      published - 5:06PM on 2017.1.17
#      author - TQ White II according to https://github.com/tqwhite.
#      via - probably some google.com search (possibly using search terms from some reference(s))

# (AK) https://stackoverflow.com/a/9826635/4722104,
#      Why is nginx responding to any domain name - Stack Overflow
#      published - 2014.9.27
#      retrieved - 2018.3.21
#      the answer by "Dayo"
#      via - probably some google.com search (possibly using search terms from some reference(s))

# (AL) http://nginx.org/en/docs/http/server_names.html
#      Server Names
#      retrieved - 2018.3.21
#      section - Miscellaneous Names
#      author - Igor Sysoev
#      editor - Brian Mercer
#      via - probably some google.com search (possibly using search terms from some reference(s))

# (AN) https://www.nginx.com/resources/wiki/start/topics/examples/server_blocks/
#      Server Block Examples | NGINX (December 2017/January 2018)
#      author - NGINX Software, Inc
#      retrieved - 2017 and/or 2018
#      via - probably some google.com search (possibly using search terms from some reference(s))

# (AO) https://www.nginx.com/blog/compiling-dynamic-modules-nginx-plus/amp/
#      How to Compile Dynamic Modules for NGINX Plus
#      published - 2016 (approximately)
#      retrieved - 2019.11.4
#      via - google.com search with search phrase "compiling new modules for nginx" ("modules" refers
#            to NGINX (reference C) modules; "compiling" is from somewhere unknown)

# (AP) https://github.com/leev/ngx_http_geoip2_module
#      GitHub - leev/ngx_http_geoip2_module: Nginx GeoIP2 module
#      author - leev
#      retrieved - sometime during 2019.10.31 - 2019.11.4
#      via - https://serverfault.com/questions/865990/nginx-and-geolite2-not-working, Joe's answer

# (AQ) https://serverfault.com/questions/865990/nginx-and-geolite2-not-working
#      geoip - Nginx and GeoLite2 not working - Server Fault
#      author - Joe and user3448600
#      retrieved - sometime during 2019.10.31 - 2019.11.4, 2019.12.12
#      published - 2017.7.31, 2018.9.3
#      via - google.com search for "ngx_http_geoip_module geolite" ("ngx_http_geoip_module" term is
#            from reference BR, while "geolite" is from reference BS)

# (AR) https://en.wikipedia.org/wiki/Transmission_Control_Protocol
#      Transmission Control Protocol - Wikipedia
#      retrieved - 2019.12.3 and prior
#      published - 2019.12.2
#      via - google.com search for "tcp" ("tcp" is from reference AS)

# (AS) https://tools.ietf.org/html/rfc675
#      Specification of the Internet Transmission Control Program
#      author - Vinton Cerf, Yogen Dalal, Carl Sunshine (author order same as reference)
#      published - 1974.12
#      retrieved - 2019.12.3
#      via - reference AR, introduction

# (AT) https://launchpad.net/~maxmind/+archive/ubuntu/ppa
#      user - maxmind
#      via - launchpad.net search for "maxmind" ("maxmind" is from the name of the company whose website is reference BT)

# (AU) https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-uwsgi-and-nginx-on-ubuntu-14-04
#      How to Serve Django Applications with uWSGI and Nginx on Ubuntu 14.04 | DigitalOcean
#      author - Justin Ellingwood
#      published - 2015.3.11
#      via - probably a google.com search (possibly using search terms from some reference(s))

# (AV) http://uwsgi-docs.readthedocs.io/en/latest/WSGIquickstart.html
#      Quickstart for Python/WSGI applications -- uWSGI 2.0 documentation
#      author - Pavlo Kapyshin, Aarni Koskela, Unbit, Jeff Widman, Balaji Iyer, Inada Naoki,
#               Adriano Di Luzio, lord63, kangle yu, Viktor Szakats, Jon Dufresne, Tobias Schonberg
#      published - 2016.12.15
#      "revision" - b1f83a5d
#      via - probably a google.com search (possibly using search terms from some reference(s))
#      other info - authors and publication date are from https://github.com/unbit/uwsgi-docs/blob/master/WSGIquickstart.rst

# (AW) https://www.digitalocean.com/community/tutorials/understanding-the-nginx-configuration-file-structure-and-configuration-contexts
#      Understanding the Nginx Configuration File Structure and Configuration Contexts | DigitalOcean
#      author - Justin Ellingwood
#      published - 2014.11.19
#      via - probably a google.com search (possibly using search terms from some reference(s))

# (AX) https://certbot.eff.org/
#      Certbot
#      author - Electronic Frontier Foundation

# (AY) https://serverfault.com/questions/250476/how-to-force-or-redirect-to-ssl-in-nginx
#      How to force or redirect to SSL in nginx? - Server Fault
#      author - various
#      retrieved - late 2017, I think
#      via - probably some google.com search (possibly using search terms from some reference(s))

# (AZ) https://uwsgi-docs.readthedocs.io/en/latest/GeoIP.html
#      The GeoIP Plugin -- uWSGI 2.0 Documentation
#      Retrieved 2019.10.31
#      "Revision" (bottom of page) b1f83a5d
#      via - google.com search, and there may be some references/sources that gave me the search terms used

# (BA) https://serverfault.com/questions/814767/413-request-entity-too-large-in-nginx-with-client-max-body-size-set
#      "413 Request Entity Too Large" in Nginx with "client_max_body_size" set - Server Fault
#      author - various
#      retrieved - late 2017, I think
#      via - probably some google.com search (possibly using search terms from some reference(s))

# (BB) https://uwsgi-docs.readthedocs.io/en/latest/
#      The uWSGI project -- uWSGI 2.0 documentation

# (BC) http://nginx.org/en/docs/http/server_names.html
#      Server Names
#      retrieved - 2017.12.18, 2018.3.21
#      via - google.com search, and there may be some references/sources that gave me the search terms used

# (BD) https://stackoverflow.com/questions/18220519/how-to-disable-djangos-invalid-http-host-error
#      logging - How to disable Django's invalid HTTP_HOST error? - Stack Overflow
#      authors - various
#      via - probably some google.com search (possibly using search terms from some reference(s))

# (BE) http://httpd.apache.org/
#      Apache web server
#      author - The Apache Software Foundation

# (BF) https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
#      Service Name and Transport Protocol Port Number Registry
#      author - IANA
#      retrieved - 2019.12.7
#      published - 2019.12.4
#      via - reference BH, top of page

# (BG) https://tools.ietf.org/html/rfc1700
#      Assigned Numbers
#      author - J. Reynolds and J. Postel (author order same as reference)
#      retrieved - 2019.12.7, 2019.12.9
#      published - 1994.10
#      via - reference B, page 12

# (BH) https://web.mit.edu/rhel-doc/4/RH-DOCS/rhel-sg-en-4/ch-ports.html
#      Common Ports
#      retrieved - 2019.12.7
#      via - a google.com search for "iana well known port numbers" (this search
#            term is based on the "Well Known Port Numbers" phrase and the mention of
#            IANA on page 15 of BG)

# (BI) https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication,
#      HTTP authentication - HTTP | MDN
#      published - 2019.10.30
#      retrived - 2019.11.20
#      via - probably a google.com search (possibly using search terms from some reference(s))

# (BJ) https://www.gzip.org/
#      The gzip home page
#      retrieved - 2019.11.26, 2019.12.12
#      via - google.com search for "gzip" ("gzip" is a term from this file, specifically the "gzip" directive)

# (BK) https://en.wikipedia.org/wiki/HTTPS
#      HTTPS - Wikipedia
#      retrieved - 2019.11.23, also possibly prior times
#      published - 2019.11.20, also possibly prior times
#      via - google.com search for "https rfc" ("https" refers to HTTPS defined by reference L, and is probably also from
#            somewhere else; "rfc" are RFCs whose website is reference BQ)

# (BL) unknown
#      retrieved - sometime during 2015 - 2018
#      via - probably a google.com search (possibly using search terms from some reference(s))

# (BM) https://en.wikipedia.org/wiki/Reserved_IP_addresses
#      Reserved IP addresses - Wikipedia
#      retrieved - 2019.12.10
#      published - 2019.12.8
#      via - google.com search for "127.0.0.1 rfc" ("127.0.0.1" refers to the usage of that IP address defined in section 3.2.1.3
#            of reference BO, which was found via the method described in point 3 below; reference BQ is the website for "rfc"s)

# (BN) https://tools.ietf.org/html/rfc6890
#      Special-Purpose IP Address Registries
#      authors - M. Cotton, L. Vegoda, B. Haberman
#      published - 2013.4
#      retrieved - 2019.12.10
#      rfc number - 6890
#      via - reference BM, intro or "IPv4" section

# (BO) https://tools.ietf.org/html/rfc1122
#      Requirements for Internet Hosts -- Communication Layers
#      author - Internet Engineering Task Force
#      retrieved - 2019.12.10
#      published - 1989.10
#      via - table 4 of reference BN

# (BP) djangoproject.com
#      Django
#      author - Django Software Foundation

# (BQ) https://ietf.org/standards/rfcs/
#      IETF | RFCs
#      author - Internet Engineering Task Force
#      retrieved - 2019.12.13
#      via - google.com search for "rfc" (search term is the acronym for Request for Comments
#            which are defined by this reference, BQ)

# (BR) http://nginx.org/en/docs/http/ngx_http_geoip_module.html
#      Module ngx_http_geoip_module

# (BS) https://dev.maxmind.com/geoip/geoip2/geolite2/
#      GeoLite2 database
#      author - MaxMind

# (BT) https://www.maxmind.com/en/home
#      author - MaxMind

# (BU) Forgotten reference. Probably somewhere in the documentation at djangoproject.com.
#      retrieved - probably around 2015

# (BV) https://1.1.1.1/
#      1.1.1.1 (DNS Service)
#      author - Cloudflare
#      via - google.com search for "1.1.1.1" ("1.1.1.1" is the name of the service)

# (BW) https://github.com/maxmind/libmaxminddb
#      libmaxminddb
#      author - MaxMind
#      via - Read point 5 below for information about how this reference was found

# (BX) https://maxmind.github.io/libmaxminddb/mmdblookup.html
#      mmdblookup - a utility to look up and IP address in a MaxMind DB file
#      author - MaxMind
#      retrieved - 2020.1.15 and probably prior
#      via - "Example Usage" of reference AP

# 1. I forget how I found reference B for HTTP.
# 2. Reference BF was discovered from reference BH near the start of the page. BH was via a
#    google.com search for "iana well known port numbers". The "well known port numbers" and
#    the term "iana" were from page 15 of reference BG. Reference BG was via page 12 of
#    reference B.
# 3. This section/reference was via reference BN, table 4. That was via the introduction
#    or "IPv4" section of reference BM.
# 4. The introductory section of AC recommended AB, while the "Standardization through
#    RFCs" section of AE recommended AD
# 5. Reference BW provides mmdblookup according to reference BX, which was via reference
#    AP's "Example Usage" section.

# See "user" documentation in M for the "user" directive's reference. I think
# this directive refers to users in Linux (H) based on the aformentioned
# documentation for the "user" directive.
# This line of configuration came with NGINX (C) by default.
user  nginx;
# See "worker_processes" documentation in M for the "worker_processes" directive's
# reference. This line of configuration came with NGINX (C) by default.
worker_processes  1;

# See "error_log" documentation in M for the "error_log" directive's reference.
# Look at that reference as well for the meaning of "warn".
# This line of configuration came with NGINX (C) by default.
error_log  /var/log/nginx/error.log warn;
# See the "pid" documentation in M for the "pid" directive's reference.
# This line of configuration came with NGINX (C) by default.
pid        /var/run/nginx.pid;

# See (A) for information regarding the next line of configuration (the
# line starting with "load_module").
# Using load_module in this next line is from reference AO
# and from the section "Installing" in reference AP. This module
# is also from the reference AP and was recommended by the answer by Joe in reference
# AQ.
# See the "load_module" documentation in M for the "load_module" directive's reference
load_module modules/ngx_http_geoip2_module.so;


# "events" and "worker_connections" are specified in their respective documentation
# found in M.
# NGINX (C) provided these next three configuration lines by default.
events {
    worker_connections  1024;
}

# I assume this next "http" directive ("http" documentation of D) refers to an HTTP server (see reference B)
# based on the D's "http" directive documentation. See point 1 for how reference B was found.
# This line of configuration came with NGINX (C) by default.
http {
    # This configuration line has something to do with B, 3.7, probably. Please see point 1.
    # File mime.types likely comes with C.
    # See the "include" documentation in M for the "include" directive's reference. This line
    # of configuration came with NGINX (C) by default.
    include       /etc/nginx/mime.types;
    # A MIME type from B 3.7 (point 1 has more information about reference B). This line comes
    # with this file by default, I think.
    # See "default_type" documentation in D for the "default_type" directive's reference.
    # This line of configuration came with NGINX (C) by default.
    default_type  application/octet-stream;

    # remote_addr: defined in D, "Embedded Variables"; that reference states that this
    #              variable contains the IP address, and IPv4 and IPv6 addresses are
    #              specified in references AB and AD (take a look at point 4 for details
    #              on the discovery of these references)
    # remote_user: defined in D, "Embedded Variables" (which pointed out that this is
    #              part of Basic Authentication; Basic Authentication is described in
    #              reference E, which was via the "Basic authentication scheme" section
    #              of reference BI)
    # request: defined in D, "Embedded Variables", don't know what this specfically
    #          refers to
    # body_bytes_sent: defined in D, "Embedded Variables", not sure what is meant
    #                  by "body"
    # http_referer: Couldn't find what this variable is a part of, but
    #               this is likely the Referer field in section 14.36 of B.
    #               Point 1 above is relevant here.
    # http_user_agent: Again, don't know where this variable is from, but this is
    #                  likely the value of the "User-Agent" header of B, 14.43 (Read
    #                  point 1 for additional information).
    # http_x_forwarded_for: Unsure what provides this variable. Probably holds
    #                       X-Forwarded-For's value according to the introductory
    #                       section of F, which is a header not from any standard
    #                       according to "Specifications" of G.
    # This "log_format" line and the two lines that follow it appears to have
    # come with the default nginx.conf provided with NGINX (C).
    # See "log_format" documentation in N for the "log_format" directive's reference.
    # Also, "time_local" and "status" are defined there as well, so look at
    # that for information about those two variables (according to that and general intuition,
    # status probably refers to HTTP status codes defined in section 6.1.1 of B; please look at
    # point 1 to find out where reference B was from). The meaning
    # of "main" is unknown ("log_format" documentation says that it is some sort of format)
    # as well as where it is defined.
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # See "access_log" documentation in N for the "access_log" directive's reference.
    # I don't know where "main" came from other than in that documentation it is
    # implied to be some sort of "format". This line of configuration came with NGINX
    # (C) by default.
    access_log  /var/log/nginx/access.log  main;

    # sendfile directive from D, sendfile documentation.
    # This line of configuration came with NGINX (C) by default.
    sendfile        on;
    # tcp_nopush directive from D (tcp_nopush documentation) which states that this controls
    # (H)'s TCP_CORK option somehow related to sockets. Reference AS defines TCP according to the
    # introduction section of AR, which also described TCP to me.
    # This line of configuration came with NGINX (C) by default; this line was commented
    # out by default, I think.
    #tcp_nopush     on;

    # keepalive_timeout directive from D, keepalive_timeout documentation
    # This line of configuration came with NGINX (C) by default.
    keepalive_timeout  65;

    # This line of configuration came with NGINX (C) by default; this line was commented
    # out by default, I think. See "gzip" documentation in O for the "gzip" directive's
    # reference. According to that reference this directive regards the usage of gzip
    # compression, which, according to reference BJ, "Links", is defined by P; I know
    # that this doesn't refer to the gzip program (Q; via "Links", in reference BJ) as
    # zlib (R, possibly via reference BJ's "links" section), not gzip, is used for
    # compression according to the NGINX "configure" script found at (S).
    #gzip  on;

    # See "include" documentation in M for the "include" directive's reference.
    # This line of configuration came with NGINX (C) by default. The file(s)
    # used by this include directive may or may not have also distributed with
    # NGINX, I think.
    include /etc/nginx/conf.d/*.conf;


    # See (A) for the next line of configuration.
    # File GeoLite2-Country.mmdb provided by geoipupdate, which is from
    # reference AT.
    # Using the ngx_http_geoip2_module discussed above to set the
    # $country variable to what is probably (according to V, which was
    # found with U) the ISO 3166 country code defined by T (T was via
    # V, "External links").
    geoip2 /home/ubuntu/maxminddatabasefiles/GeoLite2-Country.mmdb {
      auto_reload 1m;
      # This goes down though the database structure of the GeoLite2-Country.mmdb
      # file. The structure looks something like this:
      #     database entry for IP address -> "country" -> "iso_code"
      # I used 1.1.1.1 as a test IP address to see the relevant structure of
      # an entry for an arbitrary IP address, and I believe 1.1.1 belongs to reference BV.
      # mmdblookup (a command line tool provided by reference BW; please read point 5 which
      # describes the process of finding the reference for mmdblookup) was used to show the
      # entry for the IP address so that I could see the structure. This method of
      # understanding the structure of the database (looking at the output of mmdblookup
      # run on an IP address) was a recommendation by reference AP in the "Example Usage"
      # section).
      $country country iso_code;
    }

    # This next server defintion is a derivative of the server definitions found at
    # references AU, AV, and probably others. This definition is meant to work with
    # a Django (reference BP) application. Putting this server defintion here is from
    # reference AW. All sections below talking about how Certbot is its manager were
    # created and/or modified by Certbot (reference AX), not me. Method of redirecting
    # non-HTTPS (HTTPS from L, which was via reference BK, the section named "History")
    # requests in this server config (The "if ($scheme != "https")" if clause;
    # see that section for more citations) was made by Certbot, and reference AY confirmed
    # for me that this was a way to do that and also pointed out that I can still listen
    # on port 80 in the same server definition to allow those non-HTTPS connections to
    # come in and get redirected to the HTTPS site.
    # See "server" documentation in D for the "server" directive's reference.
    # This "server" line (just the line, not the block) may have come with this nginx.conf
    # file, which was supplied by NGINX (C)
    server {
      # FOR CITATION ABOUT THIS NEXT listen, SEE THE CITATION ABOVE THIS SERVER DEFINITION
      # See "listen" documentation in D for the "listen" directive's reference.
      # Uses port 80, as is standard (reference BF; see point 2 to read about how this
      # reference was discovered) for HTTP (reference B).
      # This line of configuration may or may not have come with NGINX (C) by default;
      # I can't remember.
      listen 80;

      # See "server_name" documentation in D for the "server_name" directive's reference;
      # According to that, server_name deals with domain names; domain names are defined in I and J
      # according to reference AH, "History".
      # This line may have been modified from a potential default line provided
      # by this file, which was provided by NGINX (C)
      server_name rogger.co www.rogger.co *.rogger.co;


      # See (A) for the reason why this conditional exists. This conditional
      # roughly follows the country-blocking code from reference AZ in its
      # "An example" section. It uses ISO 3166 country codes according to reference V (ISO 3166 is from
      # reference T, which was via reference V ("Relevant links"), and that was via reference U).
      # I tested to see if "country" was empty for debugging which was a strategy used by
      # unknown reference retrieved probably around 2019.10.31 saying that their variable was empty.
      # See "if" documentation in K for the "if" directive's reference.
      if ($country != "US") {
        # See "return" documentation in K for the "return" directive's reference; based on
        # that reference and intuition, this uses a status code (403), and status codes are
        # defined in 6.1.1 of B
        return 403;
      }

      # See "location" documentation in D for the "location" directive's reference.
      # I don't think that this next configuration block came by default with this
      # file, but I could be wrong. "/static" probably wasn't there by default if
      # the block did, but "/home/ubuntu/roggerenv/rogger" definitely wasn't there
      # by default. "/static" is the URI portion of a URL (partly according
      # to reference D, "location" documentation, partly to intuition); URLs are
      # defined by reference AF according to the "History" section of reference AG.
      # This handles static file requests, which aren't normally handled by Django
      # (reference BP) according to reference BU. NGINX serves up the static files instead of
      # Django. Reference BU said to let the webserver handle static requests instead
      # of relying on Django to do it.
      location /static {
        # See "root" documentation in D for the "root" directive's reference.
        root /home/ubuntu/roggerenv/rogger;
      }

      # Thanks to reference BA for telling me what the variable is in the NGINX configuration
      # that controls how big a request is allowed through the server. Limiting the request
      # size using the web server instead of Django (reference BP) or something else is a suggestion from
      # reference BL.
      # The "client_max_body_size" directive has documentation in D. I think I put this
      # line in by myself (the acceptible size was definitely written by me, maybe with
      # the exception of the "M" in the size).
      client_max_body_size 10M;

      # This sends the request to my uWSGI  instance, which then runs the Django (reference BP) app.
      # uWSGI is from reference BB. See "location" documentation in D for the "location" directive's reference
      # These four lines may have been in here by default, but probably not.
      # Reference D's "location" documentation section states that (and intuition makes me
      # assume that) the "/" refers to a URL's URI, and URLs, according to reference AG's "History"
      # section, are defined by reference AF.
      location / {
        # See "include" documentation in M for the "include" directive's reference. This
        # imports a configuration file distributed with NGINX (reference C) that deals with
        # what I assume to be uWSGI.
        include uwsgi_params;
        # See "uwsgi_pass" documentation in W for the "uwsgi_pass" directive's documentation.
        # This uses an IPv4 address (127.0.0.1) (IPv4 is defined in reference AB; this reference was
        # referred to me by AC's introduction. This is the loopback address (loopback may have been
        # defined in reference BO, section 3.2.1.3; I say "may" because reference BN, table 4 says the 127.* network
        # was assigned in 1981, but reference BO was published in 1989. See point 3 to find out how
        # reference BO section 3.2.1.3 was found.
        uwsgi_pass 127.0.0.1:8251;
      }

    # See "listen" documentation in D for the "listen" directive's reference.
    # See "ssl_certificate" documentation in X for the "ssl_certificate" directive's reference;
    # this directive refers to HTTPS defined in L (L was via the "History" section of reference
    # BK; the .pem file format is described by Y according to the introductory section of Z,
    # which makes sense because the PEM format in AA doesn't really match key files that I have
    # seen before.
    # See "include" documentation in M for the "include" directive's reference.
    # The files listed in the three configuration lines after the first were likely provided by
    # Certbot (reference AX). This server listens on port 443 (the "listen 443 ssl") for HTTPS
    # a commmon port for HTTPS (reference BF; to find out how this reference was found, see point
    # 2). All four of these next configuration lines, including the comments ending each line,
    # were created by Certbot.
    listen 443 ssl; # managed by Certbot
ssl_certificate /etc/letsencrypt/live/rogger.co/fullchain.pem; # managed by Certbot
ssl_certificate_key /etc/letsencrypt/live/rogger.co/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot


    # FOR CITATION ABOUT THIS NEXT if SECTION, SEE THE CITATION ABOVE THIS SERVER DEFINITION
    # "scheme" is from "Embedded Variables" in D. "return" directive is defined in its
    # respective documentation in K, the HTTPS scheme is defined by L (which was via sources
    # described in point 3), return codes like the 301 are discussed in B, 6.1.1 (the "return"
    # documentation of K says that it accepts status codes; please read point 1 about how B
    # was discovered), and "host" and "request_uri" are defined in D's "Embedded Variables".
    # The "scheme" variable contains the scheme used in the URL (according to reference D,
    # "Embedded Variables"); URL schemes are described in the resource that defines URLS,
    # reference AF (the reference recommended by reference AG, "History"). The "return" line
    # also uses a URL (according to reference K, "return" documentation, and intuition). The
    # "managed by Certbot" line was written by Certbot (reference AX).
    if ($scheme != "https") {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    # FOR CITATION ABOUT THIS NEXT if SECTION, SEE THE CITATION ABOVE THIS SERVER DEFINITION
    # The next line of comments was not written by Ben:
    # Redirect non-https traffic to https
    #
    # "scheme" is from "Embedded Variables" in D. "return" directive is defined in its
    # respective documentation in K, the HTTPS scheme is defined by L (which was via sources
    # described in point 3), return codes like the 301 are discussed in B, 6.1.1 (the "return"
    # documentation of K says that it accepts status codes; please read point 1 about how B
    # was discovered), and "host" and "request_uri" are defined in D's "Embedded Variables".
    # The "scheme" variable contains the scheme used in the URL (according to reference D,
    # "Embedded Variables"); URL schemes are described in the resource that defines URLS,
    # reference AF (the reference recommended by reference AG, "History"). The "return" line
    # also uses a URL (according to reference K, "return" documentation, and intuition). The
    # "managed by Certbot" line was written by Certbot (reference AX).
    # if ($scheme != "https") {
    #     return 301 https://$host$request_uri;
    # } # managed by Certbot




}
    # This server definition is used to reject requests that aren't for the domains processed
    # by the server definition above. The "return" (reference K, "return" documentation) usage is
    # from reference BC, section "Miscellaneous Names", in the code under:
    #    'In catch-all server examples the strange name "_" can be seen'
    # (that phrase is also why I used "none" for server_name, the directive found in the "server_name" documentation of
    # reference D). Putting this as the first server to make it "default" so that
    # other domains are processed here and not in the other server is probably from the same page, reference AI
    # (Fleshgrinder's answer), reference AJ, and reference AK (at least one of those four references were helpful,
    # to clarify).
    # It was suggested by reference AJ to just use the default_server command (from reference D, "server_name" section).
    # Reference AJ also said that all requests will go to the first server if no server uses "default_server", which means
    # that omitting "default_server" means that the first server is not only the default server, it is seen as the
    # only server; I don't know why I am mentioning this, but it must be important in some way.
    #
    # This server definition stops requests asking for hostnames not associated with Rogger from proceeding
    # to Rogger's Django (reference BP) application. Making sure that these requests stop here and not at Django so that I don't
    # get spammed with error emails is an idea from reference BD. Even though this version of the site uses Nginx
    # (and I think reference BD was about Apache (reference BE)), there might be some configuration
    # used in reference BD that was directly, or more likely indirectly, relevant to what I wrote
    # for this server definition. Using two different listens (the "listen" documentation in reference D)
    # for each port is an idea from Certbot (reference AX) which did this for the server definition for Rogger.
    #
    # "default_server" usage is from reference AL's "Miscellaneous Names" and reference AJ.
    # "default" (I don't know what the "default" is that I am talking about here) is from somewhere else that
    # I forget (probably reference AI, Fleshgrinder's answer), but I don't use it here. If it was not that reference,
    # it was retrieved probably late 2017 and/or early 2018 and searching with google.com potentially using search terms
    # from some source likely helped me find it.
    #
    # References AI and AN were useful in some way, but I forget (probably related to the default_server,
    # or to the suggestion of creating virtual server to deal with unknown domains, like showing the syntax
    # on how to do it)
    #
    # See "server" documentation in D for the "server" directive's reference; I don't
    # remember where this configuration block (the "server { ... }" section) is from, it could
    # be a mix of my own stuff (discussed above) and what was here by default.
    #server {
    #  # See "server_name" documentation in D for the "server_name" directive's reference; this
    #  # directive uses domain names (in part according to reference D, "server_name" documentation),
    #  # which the "History" section of reference AH says is defined in reference I and J.
    #  server_name none; # from reference AN 'A Default "Catch All" Server Block', reference AL "Miscellaneous Names" where they both
    #                    # use "_" for "server_name"
    #  # See "listen" documentation in D for the "listen" directive's reference; default_server is also defined there.
    #  # Using port 80 as allocated for HTTP (reference B; to find out what this reference was
    #  # recommended by, see point 1) by reference BF (please read point 2 towards the top of this file for what
    #  # referred reference BF).
    #  listen 80 default_server; # default/default_server citations in comments above
    #  # See "listen" documentation in D for the "listen" directive's reference; default_server is also defined there
    #  # Port 443 is used for SSL'd HTTP (a.k.a HTTPS, reference L, whose recommenders can be seen in point 3) which
    #  # is recognized by reference BF (how I found BF is in point 2) as the de facto official port for HTTPS.
    #  #listen 443 default_server; # default/default_server citations in comments above
    #  # See "return" documentation in K for the "return" directive's reference. That reference
    #  # and intuition says that 403 is an HTTP code; According to a unknown reference (see point 1),
    #  # HTTP codes are defined in B, 6.1.1
    #  return 403;
    #}
}
